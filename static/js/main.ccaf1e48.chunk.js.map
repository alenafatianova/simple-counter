{"version":3,"sources":["CounterSettings.module.scss","counter.module.scss","ButtonSettings.module.scss","CounterSettingsButton.tsx","Counter.tsx","CounterSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CounterSettingsButton","props","className","s","setButton","onClick","e","onClickSet","startValue","maxValue","disabled","title","Counter","classCount","counterTitle","count","disable","error","setCount","CounterSettings","useState","setStartValue","setMaxValue","isValid","wrapper","screen","onChange","Number","currentTarget","value","setError","type","inputDefault","App","localStorage","getItem","setItem","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ccaf1e48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CounterSettings_wrapper__1ojDv\",\"screen\":\"CounterSettings_screen__3GWrs\",\"startValue\":\"CounterSettings_startValue__3kpJe\",\"maxValue\":\"CounterSettings_maxValue__2PBOS\",\"inputDefault\":\"CounterSettings_inputDefault__W_cAQ\",\"error\":\"CounterSettings_error__7DTba\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"classCount\":\"counter_classCount__2zgpv\",\"title\":\"counter_title__3pxdP\",\"counterTitle\":\"counter_counterTitle__1Pi-j\",\"buttonInc\":\"counter_buttonInc__2YZeT\",\"disable\":\"counter_disable__aar9_\",\"opacity\":\"counter_opacity__3PQW_\",\"error\":\"counter_error__2hdyr\",\"count\":\"counter_count__yQg6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setButton\":\"ButtonSettings_setButton__2mpfL\"};","import React, { MouseEvent } from 'react'\nimport s from './ButtonSettings.module.scss'\n\n\nexport type ButtonSettingType = {\n    disabled: boolean\n    title: string\n    startValue: number\n    maxValue: number\n    onClickSet: (startValue: number, maxValue: number) => void\n}\n\nexport default function CounterSettingsButton(props: ButtonSettingType) {\n    return (\n        <div>\n            <div className={s.setButton}>\n                <button \n                    onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                    props.onClickSet(props.startValue,props.maxValue )}} \n                    disabled={props.disabled}\n                    >\n                    {props.title}\n                </button>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./counter.module.scss\";\nimport CounterSettingsButton from \"./CounterSettingsButton\";\nimport Button from '@material-ui/core/Button'\n\ntype PropsType = {\n  title: any\n  maxValue: number\n  startValue: number\n  count: number\n  setCount: (startValue: number) => void\n  error: string\n};\n\nexport function Counter(props: PropsType) {\n\n  let Inc = () => props.setCount(props.count + 1);\n  let reset = () => props.setCount(props.startValue);\n  \n\n  return (\n    <div>\n      <div className={s.classCount}>\n        <div className={s.counterTitle}>{props.title}</div>\n        <div className={props.count === props.maxValue ? s.disable : \"\"}>\n          <div className={props.error ? s.disable : ''} >\n            {props.error ? props.error : props.count}\n            </div>\n\n          <CounterSettingsButton  \n            title={'inc'} \n            onClickSet={Inc} \n            disabled={props.count === props.maxValue} \n            maxValue={props.maxValue}\n            startValue={props.startValue}\n          /> \n          <CounterSettingsButton  \n            title={'reset'} \n            onClickSet={reset} \n            disabled={props.count === props.startValue} \n            maxValue={props.maxValue}\n            startValue={props.startValue}\n            />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useState, ChangeEvent} from 'react'\nimport s from './CounterSettings.module.scss'\nimport CounterSettingsButton from './CounterSettingsButton'\n\n\n\ntype CounterType  = {\n    maxValue: number\n    startValue: number\n    setStartValue: (startValue: number) => void\n    setMaxValue: (maxValue: number) => void\n    onClickSet: (startValue: number, maxValue: number) => void\n    setError: (error: string)=> void\n}\n\nexport  function CounterSettings(props: CounterType) {\n\nconst [startValue, setStartValue] = useState<number>(0)\nconst [maxValue, setMaxValue] = useState<number>(5)\nconst isValid = (startValue: number, maxValue: number) => {\n    return startValue >= 0 && maxValue > startValue \n}\nconst onChangeStart = (e: ChangeEvent<HTMLInputElement>) => {\n    setStartValue(Number(e.currentTarget.value))\n    isValid(startValue, maxValue) ? props.setError('') : props.setError('Invalid input')\n}\nconst onChangeMax = (e: ChangeEvent<HTMLInputElement>) => {\n    setMaxValue(Number(e.currentTarget.value))\n    isValid(startValue, maxValue) ? props.setError('') : props.setError('Invalid input')\n}\n\n    return (\n        <div className={s.wrapper}>\n            <div className={s.screen}>\n                <div className={s.maxValue}>\n                    <span>max value </span>\n                    <input\n                    onChange={onChangeMax}\n                    value={maxValue}\n                    type=\"number\" \n                    className={maxValue >= 0 && maxValue > startValue ? s.inputDefault : s.error  }  \n                    />\n                </div>\n                <div className={s.startValue}>\n                    <span>start value</span>\n                    <input\n                        onChange={onChangeStart}\n                        value={startValue}\n                        type=\"number\" \n                        className={startValue >= 0 && startValue < maxValue ? s.inputDefault : s.error }\n                        />\n                </div>  \n                \n            </div>\n            <CounterSettingsButton \n                maxValue={maxValue}\n                startValue={startValue}\n                disabled={startValue < 0 || startValue >= maxValue} \n                title={'set'} \n                onClickSet={props.onClickSet}\n                />\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport {Counter} from './Counter'\nimport './App.css';\nimport {CounterSettings} from './CounterSettings';\n\n\n\nfunction App() {\n  \n  const [startValue, setStartValue] = useState<number>(Number(localStorage.getItem('startValue')))\n  const [maxValue, setMaxValue] = useState<number> (Number(localStorage.getItem('maxValue')) || 5)\n  let [count, setCount] = useState(startValue);\n  const onClickSet = (startValue: number, maxValue: number) => {\n    setCount(startValue)\n    setStartValue(startValue)\n    setMaxValue(maxValue)\n    localStorage.setItem('startValue', startValue.toString())\n    localStorage.setItem('maxValue', maxValue.toString())\n  }\n  const [error, setError] = useState('')\n\n  return (\n    \n    <div className=\"App\">\n    <Counter \n      error={error}\n      setCount={setCount}\n      count={count}\n      title='Counter' \n      maxValue={maxValue} \n      startValue={startValue} />\n\n    <CounterSettings \n      setError={setError}\n      onClickSet={onClickSet}\n      maxValue={maxValue} \n      startValue={startValue} \n      setStartValue={setStartValue} \n      setMaxValue={setMaxValue} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render( \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}